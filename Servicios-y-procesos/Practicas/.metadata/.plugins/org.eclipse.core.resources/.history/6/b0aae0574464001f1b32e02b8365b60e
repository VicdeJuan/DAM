package ejercicio1;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Scanner;
import java.nio.charset.StandardCharsets;


public class DescifradorParalelo implements Runnable {
	
	private final byte[] encodedhash; //read-only variable
	
	private static String contraseñaEncontrada; // variable compartida con la contraseña encontrada
    private static volatile boolean encontrada = false; // Variable compartida que indica si se encontró la contraseña    
    private static final Object lock = new Object();
    
    
    private int len;
	private String prefix;
    
	
	/**
	 * Constructor 
	 * 
	 * @param encodedhash
	 * @param longitud
	 * @param prefix
	 */
	public DescifradorParalelo(byte[] encodedhash,int longitud,String prefix) {
		this.encodedhash = encodedhash;
		this.len = longitud;
		this.prefix = prefix;
		
	}
	
	
	
	private void descifrarRecursivo(byte[] hash,String prefix,int len) {
		if (len == 0) {
			String combination = prefix;
			synchronized (lock) {
                if (!encontrada) { // Verifica si ya se encontró antes
                    encontrada = true;
                    contraseñaEncontrada = combination;
                }
			}
		}
		else {
			for (char c1 = 'a'; c1 <= 'z'; c1++) {
				String combination = prefix + c1;
				if (!encontrada) {
					descifrarRecursivo(hash,combination,len-1);	
				}
			}		
		}
	}
	
	public void descifrarContraseña() {
		
		descifrarRecursivo(this.getEncodedhash(),prefix,len);
	}
	

	@Override
	public void run() {
		System.out.println("Hilo " + prefix + " empezando");
		descifrarContraseña();
		
	}

	/**
	 * @return the encodedhash
	 */
	public byte[] getEncodedhash() {
		return encodedhash;
	}

	
	/**
	 * 
	 * @return la contraseña encontrada
	 */
	public static String getContraseñaEncontrada() {
		return contraseñaEncontrada;
	}
}
