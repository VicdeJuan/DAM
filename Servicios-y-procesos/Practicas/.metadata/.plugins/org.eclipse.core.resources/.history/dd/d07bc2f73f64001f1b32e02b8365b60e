package ejercicio1;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Scanner;
import java.nio.charset.StandardCharsets;


public class DescifradorParalelo implements Runnable {
	
	private final byte[] encodedhash; //read-only variable
	
	private static String contraseñaEncontrada; // variable compartida con la contraseña encontrada
    private static volatile boolean encontrada = false; // Variable compartida que indica si se encontró la contraseña
    

	
	public DescifradorParalelo(byte[] encodedhash) {
		this.encodedhash = encodedhash;
		contraseñaEncontrada = "";
	}
	
	
	public byte[] getHash(String text) {
		
		byte[] encodedhash = null;
		MessageDigest digest;
		try {
			digest = MessageDigest.getInstance("SHA-256");
			encodedhash = digest.digest(
					  text.getBytes(StandardCharsets.UTF_8));
		} catch (NoSuchAlgorithmException e) {
			// 
			e.printStackTrace();
		}
		return encodedhash;
	}
	
	
	private String descifrarRecursivo(byte[] hash,String prefix,int len) {
		if (len == 0) {
			String combination = prefix;
            if (Arrays.equals(getHash(combination),hash)) {
            	return combination;
            }
            return "";
		}
		else {
			for (char c1 = 'a'; c1 <= 'z'; c1++) {
				String combination = prefix + c1;
				encontrada = descifrarRecursivo(hash,combination,len-1);
				if (encontrada != "")
					return encontrada;
			}	
			return "";
		}
		
		
	}
	
	public String descifrarContraseña(byte[] hash,int len) {
		
		return descifrarRecursivo(hash,"",len);
	}
	

	@Override
	public void run() {
		descifrarContraseña();
		
	}

	/**
	 * @return the encodedhash
	 */
	public byte[] getEncodedhash() {
		return encodedhash;
	}
}
